name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    
    - name: Run Black
      run: |
        black --check --diff datasets/scripts/ manifest/ tests/
    
    - name: Run Flake8
      run: |
        flake8 datasets/scripts/ manifest/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run MyPy
      continue-on-error: true
      run: |
        mypy datasets/scripts/ manifest/ --ignore-missing-imports

  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov Pillow numpy
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  validate-manifest:
    name: Validate Manifest Schema
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema
    
    - name: Validate manifest schema
      run: |
        cd manifest
        python -c "
        import json
        import jsonschema
        
        with open('styles_schema.json', 'r') as f:
            schema = json.load(f)
        
        with open('styles.json', 'r') as f:
            manifest = json.load(f)
        
        jsonschema.validate(manifest, schema)
        print('✓ Manifest is valid')
        "
    
    - name: Check manifest version
      run: |
        cd manifest
        python -c "
        import json
        import re
        
        with open('styles.json', 'r') as f:
            manifest = json.load(f)
        
        version = manifest.get('version', '')
        assert re.match(r'^\d+\.\d+\.\d+$', version), 'Invalid version format'
        print(f'✓ Version: {version}')
        "

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check README exists
      run: |
        test -f README.md
        test -f datasets/README.md
        test -f training/README.md
        test -f conversion/README.md
        echo "✓ All README files exist"
    
    - name: Check LICENSE exists
      run: |
        test -f LICENSE
        echo "✓ LICENSE file exists"
    
    - name: Check requirements.txt
      run: |
        test -f requirements.txt
        python -c "
        with open('requirements.txt', 'r') as f:
            reqs = f.read()
        assert 'torch' in reqs or 'tensorflow' in reqs
        assert 'coremltools' in reqs
        print('✓ requirements.txt is valid')
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check dependencies for vulnerabilities
      continue-on-error: true
      run: |
        pip install -r requirements.txt
        safety check --json

  notify:
    name: Notification
    needs: [lint, test, validate-manifest, docs]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check workflow status
      run: |
        if [ "${{ needs.lint.result }}" = "success" ] && \
           [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.validate-manifest.result }}" = "success" ] && \
           [ "${{ needs.docs.result }}" = "success" ]; then
          echo "✓ All checks passed!"
        else
          echo "✗ Some checks failed"
          exit 1
        fi
